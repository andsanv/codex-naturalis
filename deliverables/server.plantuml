@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

package "server" {
    interface GameServerActions << interface >> {
      + send(GameCommand): void
      + connectToGame(UserInfo, GameViewActions): void
    }

    interface MainServerActions << interface >> {
      + send(MainCommand): void
      + connectToMain(String, MainViewActions, GameViewActions): void
      + reconnect(UserInfo, MainViewActions, GameViewActions): void
    }

    package "rmi" {
        class RMIGameServer {
          - clients: ConcurrentHashMap<UserInfo, GameViewActions>
          - rmiConnectionInfo: String
          - gameFlowManager: GameFlowManager
          - executorService: ExecutorService
          + run(): void
          + send(GameCommand): void
          + connectToGame(UserInfo, GameViewActions): void
        }

        class RMIMainServer {
          - executorService: ExecutorService
          + connectToMain(String, MainViewActions, GameViewActions): void
          + run(): void
          + send(MainCommand): void
          + reconnect(UserInfo, MainViewActions, GameViewActions): void
        }
    }

    package "socket" {
        class ClientHandler {
          - out: ObjectOutputStream
          - gameFlowManager: GameFlowManager
          - in: ObjectInputStream
          + receiveEvent(GameEvent): void
          + run(): void
          + receiveEvent(MainEvent): void
          + update(GameEvent): void
          + setGameServer(GameServerActions): void
          + setGameFlowManager(GameFlowManager): void
        }

        class SocketServer {
          - executorService: ExecutorService
          - connections: ConcurrentHashMap<UserInfo, ClientHandler>
          - serverSocket: ServerSocket
          + startAcceptingClients(): void
          + getConnections(): ConcurrentHashMap<UserInfo, ClientHandler>
        }
    }
}

package "server.rmi" {



@enduml
