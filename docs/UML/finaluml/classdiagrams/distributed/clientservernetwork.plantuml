@startuml
!theme plain
top to bottom direction

package "distributed" {

	package "interfaces" {

		interface GameServerActions << interface >> {
			+ connectToGame(UserInfo, GameViewActions): void
			+ transmitCommand(GameCommand): void
		}
		interface GameViewActions << interface >> {
			+ transmitEvent(GameEvent): void
		}
		interface MainServerActions << interface >> {
			+ reconnect(UserInfo, MainViewActions, GameViewActions): void
			+ connectToMain(String, MainViewActions, GameViewActions): void
			+ transmitCommand(MainCommand): void
		}
		interface MainViewActions << interface >> {
			+ trasmitEvent(MainEvent): void
			+ setGameServer(GameServerActions): void
		}

	}

	package "server" {

		class Client implements .Observer, distributed.interfaces.MainViewActions, distributed.interfaces.GameViewActions {
			- status: Status
			+ userInfo: AtomicReference<UserInfo>
			+ setDisconnectionStatus(): void
			+ setStatus(Status): void
			+ getStatus(): Status
		}
		package "socket" {

			class SocketServer {
				- executorService: ExecutorService
				- serverSocket: ServerSocket
				- connections: ConcurrentHashMap<UserInfo, SocketClientHandler>
				+ startAcceptingClients(): void
				+ handleSingleClientConnection(Socket): void
			}
			class SocketClientHandler extends distributed.server.Client {
				- out: ObjectOutputStream
				- in: ObjectInputStream
				- gameFlowManager: GameFlowManager
				+ setGameFlowManager(GameFlowManager): void
			}

		}


		package "rmi" {

			class RMIGameServer implements distributed.interfaces.GameServerActions {
				- gameFlowManager: GameFlowManager
				- executorService: ExecutorService
			}
			class RMIHandler extends distributed.server.Client {
				+ rmiGameView: GameViewActions
				+ rmiMainView: MainViewActions
				+ setGameServer(GameServerActions): void
			}
			class RMIMainServer implements distributed.interfaces.MainServerActions {
				- executorService: ExecutorService
				+ run(): void
			}
		}

	}

	package "client" {

		package "rmi" {

			class RMIGameView implements distributed.interfaces.GameViewActions {
				- connectionHandler: RMIConnectionHandler
				- gameEventHandler: GameEventHandler
				+ transmitEvent(GameEvent): void
			}
			class RMIMainView implements distributed.interfaces.MainViewActions {
				- connectionHandler: RMIConnectionHandler
				- mainEventHandler: MainEventHandler
				+ trasmitEvent(MainEvent): void
				+ setGameServer(GameServerActions): void
			}

		}

		class ConnectionHandler {
			+ isConnected: AtomicBoolean
			+ lastKeepAliveTime: long
			+ userInterface: UI
			+ sendToGameServer(GameCommand): boolean
			+ connect(ConnectionCommand): boolean
			+ reconnect(): boolean
			+ sendToMainServer(MainCommand): boolean
		}

		class RMIConnectionHandler extends ConnectionHandler {
			- mainServerActions: MainServerActions
			- gameServerActions: GameServerActions
		}
		class SocketConnectionHandler extends ConnectionHandler {
			- outputStream: ObjectOutputStream
			- socket: Socket
			- inputStream: ObjectInputStream
			- createListenerThread(): void
		}

	}
}

interface Observer  {
	+ update(GameEvent): void
}



@enduml
