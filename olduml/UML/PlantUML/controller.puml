@startuml

skinparam linetype ortho

scale 4000x4000

package controller {

    package states {

        abstract class GameState {
            - gameFlowManager: GameFlowManager
            - gameModelUpdater: GameModelUpdater
            - playerIds: List<String>
            - IdToToken: Map<String, PlayerToken>
            + GameState(gameFlowManager: GameFlowManager)
            + setup(): void
            + playCard(playerToken: PlayerToken, coords: Coords, card: PlayableCard, cardSide: CardSide): boolean
            + drawResourceDeckCard(playerToken: PlayerToken): boolean
            + drawGoldDeckCard(playerToken: PlayerToken): boolean
            + drawVisibleResourceCard(playerToken: PlayerToken, choice: int): boolean
            + drawVisibleGoldCard(playerToken: PlayerToken, choice: int): boolean
            + postGame(): boolean
        }

        class SetupState {
            + SetupState(gameFlowManager: GameFlowManager)
            + setup()
        }

        class DrawCardState {
            - gameFlowManager: GameFlowManager
            + DrawCardState(gameFlowManager: GameFlowManager)
            + drawResourceDeckCard(playerToken: PlayerToken): boolean
            + drawGoldDeckCard(playerToken: PlayerToken): boolean
            + drawVisibleResourceCard(playerToken: PlayerToken, choice: int): boolean
            + drawVisibleGoldCard(playerToken: PlayerToken, choice: int): boolean
        }

        class PlayCardState {
            + PlayCardState(gameFlowManager: GameFlowManager)
            + playCard(playerToken: PlayerToken, coords: Coords, card: PlayableCard, cardSide: CardSide): boolean
        }

        class PostGameState {
            + PostGameState(gameFlowManager: GameFlowManager)
            + postGame(): boolean
        }

    }

    package server {

        class Game {
            - isConnected: Map<User, Boolean>
            + Game(lobby: Lobby)
        }

        class Lobby {
            - nextId: int
            - id: int
            - manager: User
            - users: List<User>
            - gameStarted: boolean
            + getUsers(): List<User>
            + getManager(): User
            + Lobby(creator: User)
            + addUser(user: User): boolean
            + removeUser(user: User): boolean
            + startGame(): boolean
        }

        class LobbyInfo {
            - id: int
            - manager: UserInfo
            - users: List<UserInfo>
            - gameStarted: boolean
            + LobbyInfo(lobby: Lobby)
        }

        enum Server {
            - lobbies: Map<Integer, Lobby>
            - users: Set<User>
            - connectedPlayers: ConcurrentHashMap<VirtualMainView, Boolean>

            {method} + joinLobby(user: User, lobbyId: int): boolean
            {method} + leaveLobby(user: User, lobbyId: int): boolean
            {method} + getLobbies(): List<LobbyInfo>
            {method} + startGame(user: User, lobbyId: int): boolean
            {method} + signup(name: String): UserInfo
            {method} + createLobby(userInfo: UserInfo): LobbyInfo
            {method} + addConnectedClient(clientMainView: VirtualMainView): void
            {method} + removeConnectedClient(clientMainView: VirtualMainView): void
            {method} - broadcastLobbies(lobbies: List<LobbyInfo>): void
        }

        class User {
            -static nameToNextId: Map<String, Integer>
            +final name: String
            +final id: int
            +User(name: String)
            +toString(): String
            +equals(obj: Object): boolean
            +hashCode(): int
        }

        class UserInfo {
            +final name: String
            +final id: int
            +UserInfo(user: User)
            +toString(): String
            +equals(obj: Object): boolean
        }

    }

    class GameFlowManager implements GameUpdateObserver {
        - eventsToBroadcast: BlockingQueue<GameUpdate>
        + receivedEvents: BlockingQueue<GameCommand>
        - isConnected: Map<User, Boolean>
        - setupState: GameState
        - playCardState: GameState
        - drawCardState: GameState
        - postGameState: GameState
        - currentState: GameState
        - playersIds: List<String>
        - IdToToken: Map<String, PlayerToken>
        - turn: Integer
        - round: Integer
        - isLastRound: Boolean
        - timeLimit: long
        - lastMovePlayed: Boolean
        + GameFlowManager(lobby: Lobby)
        + run(): void
        + handleTurn(): Thread
        + setState(nextState: GameState): void
        + playCard(playerId: String, coords: Coords, card: PlayableCard, cardSide: CardSide): boolean
        + drawResourceDeckCard(playerId: String): boolean
        + drawGoldDeckCard(playerId: String): boolean
        + drawVisibleResourceCard(playerId: String, choice: int): boolean
        + drawVisibleGoldCard(playerId: String, choice: int): boolean
        + getTurn(): String
        + manageTurn(): void
        + getIsConnected(): Map<User, Boolean>
        + setIsConnected(user: User, isConnected: Boolean): void
        + getCurrentState(): GameState
        + setCurrentState(state: GameState): void
        + setTimeLimit(timeLimit: long): void
        + getTimeLimit(): long
    }

    class GameModelUpdater {

        - model: GameModel
        + GameModelUpdater(model: GameModel)
        + playCard(playerToken: PlayerToken, coords: Coords, card: PlayableCard, cardSide: CardSide): boolean
        + drawResourceDeckCard(playerToken: PlayerToken): boolean
        + drawGoldDeckCard(playerToken: PlayerToken): boolean
        + drawVisibleResourceCard(playerToken: PlayerToken, chosen: int): boolean
        + drawVisibleGoldCard(playerToken: PlayerToken, chosen: int): boolean
        + drawObjectiveCard(): Optional<ObjectiveCard>
        + drawStarterCard(): Optional<StarterCard>
        + limitPointsReached(): boolean
        + someDecksEmpty(): boolean
        + addPlayer(token: PlayerToken, starterCard: StarterCard, starterCardSide: CardSide, objectiveCard: ObjectiveCard)
        + setPlayersMap(tokenToStarterCard: Map<PlayerToken, StarterCard>, cardsSidesPlayed: Map<StarterCard, CardSide>)
        + setCommonObjectives(commonObjectives: List<ObjectiveCard>)
    }

   GameState <--up-- GameFlowManager: controls
   GameFlowManager -->"1" Lobby: has
   GameFlowManager -right-> GameModelUpdater: uses
   Lobby "1"--o "1..4" User: has
   LobbyInfo "1" --o "1..4" UserInfo: has
   LobbyInfo "1" --  Lobby

   Game "1"-"1" GameFlowManager: has
   Game "1"--"1" Lobby: has

   GameState <|-- SetupState
   GameState <|-- DrawCardState
   GameState <|-- PlayCardState
   GameState <|-- PostGameState

   UserInfo "1"--"1" User

   Server -- Lobby: has
   Server "1"--"0..*" User: has

@enduml